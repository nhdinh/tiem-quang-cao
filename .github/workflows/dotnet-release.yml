# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert =  [System.IO.File]::ReadAllBytes("...path...\SigningCertificate.pfx")
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches:  
      - '*'
    tags:
      - '*'
  pull_request:
    branches: [ master ]

jobs:
  test_and_build:
    name: "Test and Build"

    runs-on: windows-latest

    env:
      Solution_Name: TiemQuangCao.sln
      Project_Directory: TiemQuangCao
      Test_Project_Path: TiemQuangCao.Tests\TiemQuangCao.Tests.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Make BuildConstants
      shell: bash
      run: |
        tag=$(git describe --tags --abbrev=0)
        repo_name=${GITHUB_REPOSITORY/"${GITHUB_REPOSITORY_OWNER}/"/""}
        export build_consts_path="${Project_Directory}/BuildConstants.cs"
        
        echo "namespace TiemQuangCao {" >> ${build_consts_path}
        echo "public static class BuildConstants {" >> ${build_consts_path}
        echo "public const string GITHUB_USERNAME = \"${GITHUB_REPOSITORY_OWNER}\";" >> ${build_consts_path}
        echo "public const string GITHUB_REPOSITORY = \"${repo_name}\";" >> ${build_consts_path}
        echo "}}" >> ${build_consts_path}

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 5.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test $env:Test_Project_Path


  release:
    name: "Release"

    needs: test_and_build

    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        configuration: [Debug, Release]
        runtime_identifier: [win-x86, win-x64]

    runs-on: windows-latest

    env:
      Project_Directory: TiemQuangCao
      Project_Path: TiemQuangCao\TiemQuangCao.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Make BuildConstants
      shell: bash
      run: |
        tag=$(git describe --tags --abbrev=0)
        repo_name=${GITHUB_REPOSITORY/"${GITHUB_REPOSITORY_OWNER}/"/""}
        export build_consts_path="${Project_Directory}/BuildConstants.cs"
        
        echo "namespace TiemQuangCao {" >> ${build_consts_path}
        echo "public static class BuildConstants {" >> ${build_consts_path}
        echo "public const string GITHUB_USERNAME = \"${GITHUB_REPOSITORY_OWNER}\";" >> ${build_consts_path}
        echo "public const string GITHUB_REPOSITORY = \"${repo_name}\";" >> ${build_consts_path}
        echo "}}" >> ${build_consts_path}

    - name: Modify version of the assembly
      shell: bash
      run: |
        tag=$(git describe --tags --abbrev=0)
        version=${tag/"v"/""}

        sed -i "s/<AssemblyVersion>0.0.0.0</AssemblyVersion>/<AssemblyVersion>{$version}</AssemblyVersion>/g" ${Project_Path}
        sed -i "s/<FileVersion>0.0.0.0</FileVersion>/<FileVersion>{$version}</FileVersion>/g" ${Project_Path}
        
    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    - name: Build package
      shell: bash
      run: |
        # Define some variables for things we need
        tag=$(git describe --tags --abbrev=0)
        release_name="TiemQuangCao-$tag-$RuntimeIdentifier-$Configuration"

        # build everything
        dotnet publish "$Project_Path" --framework "net5.0-windows" --runtime "$RuntimeIdentifier" -c "$Configuration" -o "$release_name"

        # pack files
        7z a -tzip "${release_name}.zip" "./${release_name}/*"

        # Delete output directory
        rm -r "$release_name"
      env:
        RuntimeIdentifier: ${{ matrix.runtime_identifier }}
        Configuration: ${{ matrix.configuration }}

    # publish
    - name: Publish
      uses: softprops/action-gh-release@v1
      with:
        files: |
          TiemQuangCao-*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Project_Directory\GitHubActionsWorkflow.pfx